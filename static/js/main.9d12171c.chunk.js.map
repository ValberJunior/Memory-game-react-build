{"version":3,"sources":["game/game.js","components/GameOver.js","components/GameHome.js","components/CardElement.js","components/GameBoard.js","MemoryGame.js","reportWebVitals.js","index.js"],"names":["game","lockMode","firstCard","secondCard","items","cards","setCard","id","card","this","filter","console","log","flipped","checkMatch","icon","clearCards","unflipCards","checkGameOver","length","createCards","forEach","item","push","createPair","flatMap","pair","shuffleCards","createId","parseInt","Math","random","currentIndex","randomIndex","floor","flipcard","cardId","gameOverCallBack","noMatchCallBack","setTimeout","GameOver","props","show","onClick","handleRestart","GameHome","handleStart","CardElement","handleFlip","className","src","alt","GameBoard","map","index","MemoryGame","useState","gameHome","setGameHome","gameBoardOn","setGameBoardOn","setCards","useEffect","gameOver","setGameOver","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d12171c.chunk.js","sourcesContent":["//Objeto GAME, com todas propriedades e métodos.\r\n\r\nlet game = {\r\n\r\n lockMode : false,                      //Modo inicial da carta, caso ela ainda não esteja com seu par, ela não será bloqueada.\r\n \r\n firstCard : null,                      //A primeira e a segunda carta, ao iniciar a jogada serão vazias, após viradas caso derem par ficarão preenchidas, se não, voltarão ao estado inicial;\r\n\r\n secondCard : null,\r\n\r\n items : ['image1','image2','image3','image4', 'image5', 'image6', 'image7','image8', 'image9', 'image10'],  //Minhas imagens\r\n\r\n cards : null,   \r\n\r\n setCard : function(id){    //Função para setar a carta.\r\n\r\n let card = this.cards.filter(card => card.id === id)[0];  //Card recebe o resultado do filtro da carta selecionada(identificada pelo Id), retornará um array de um elemento.\r\n console.log(card);   \r\n\r\n if(card.flipped || this.lockMode){              //Se a codição de carta virada ou lockMode for verdadeiro, retornará o valor FALSE.\r\n     return false;\r\n }\r\n\r\n if(!this.firstCard){                          //Se ainda Não tivermos valor para primeira carta, a carta virada será atribuida a primeira carta \r\n     this.firstCard = card;\r\n     this.firstCard.flipped = true;\r\n     return true;\r\n } else{\r\n     this.secondCard = card;                   //Se não, será atribuido a segunda carta..\r\n     this.secondCard.flipped = true;\r\n     this.lockMode = true;\r\n     return true;\r\n }\r\n\r\n },\r\n\r\n checkMatch : function (){                   //Checagem de PAR\r\n     if (!this.firstCard || !this.secondCard){\r\n         return false;\r\n     }\r\n    return this.firstCard.icon === this.secondCard.icon;\r\n },\r\n\r\n clearCards : function(){                //Redefinindo valores caso não encontre o par\r\n     this.firstCard = null;\r\n     this.secondCard = null;\r\n     this.lockMode = false;\r\n },\r\n\r\n unflipCards : function (){                    //desvirar as cartas \r\n     this.firstCard.flipped = false;\r\n     this.secondCard.flipped = false;\r\n     this.clearCards();\r\n },\r\n \r\n checkGameOver : function (){              //Checar se houve fim de jogo ou não.\r\n     \r\n    return this.cards.filter(card => !card.flipped).length === 0;   //Um filtro retornará se o valor de cartas não viradas for zero, definirá o fim do jogo.\r\n \r\n},\r\n\r\n\r\ncreateCards: function (items){     //Função para criar as cartas\r\n    this.cards = [];\r\n\r\n    this.items.forEach((item) => {               //transformar cada elemento do meu ITEMS em um ITEM, adicionar no array CARDS e criar seu par na função CreatePair\r\n        this.cards.push(this.createPair(item));\r\n    });\r\n\r\n    this.cards = (this.cards.flatMap(pair => pair));   //O flatMAP irá me retornar 2 arrays juntos, caso fizesse apenas o MAP, ele retornaria 10 arrays com 2 cartas (as pares), e não as 20 em um array só.\r\n    this.shuffleCards();                                // Função para embaralhar as cartas\r\n    return this.cards;                                   //Retorno as cartas.\r\n},\r\n\r\ncreatePair :  function (item){                   //Função de criação do par.\r\n\r\n    return[{\r\n        id: this.createId(item),               //Retornará um ID, Um Icone e um valor para Flipped, em 2 objetos (os Pares)\r\n        icon: item,\r\n        flipped: false,\r\n    },{\r\n        id: this.createId(item),\r\n        icon: item,\r\n        flipped: false,\r\n    }]\r\n\r\n},\r\n\r\ncreateId :  function (item){                                //Criar o id para a carta\r\n    return item + parseInt(Math.random() * 1000);           //ParseInt define um número inteiro fruto do resultado de um número aleatório entre 0 e 1000.\r\n},\r\n\r\nshuffleCards: function (cards){                            //Função para embaralhar as cartas.\r\n    let currentIndex = this.cards.length;                  //CurrentIndex receberá o tamanho do meu array CARDS\r\n    let randomIndex = 0;                                   //RandomIndex começará valendo 0;\r\n \r\n    while(currentIndex !== 0){                                    //Enquanto eu não percorrer todos os elementos do meu array CARDS:\r\n        randomIndex = Math.floor(Math.random() * currentIndex);   //RandomIndex recebe um número aleatório.\r\n        currentIndex-- ;                                          //Então ao passar por cada elemento do array, este é decrementado do currentIndex\r\n \r\n        [this.cards[randomIndex], this.cards[currentIndex]] = [this.cards[currentIndex],this.cards[randomIndex]];  //Para embaralhar, inverto os valores cada vez que passar pelo WHILE.\r\n     };\r\n },\r\n\r\nflipcard: function (cardId, gameOverCallBack, noMatchCallBack){\r\n\r\n    if (this.setCard(cardId)){\r\n\r\n        //aqui\r\n\r\n        if (this.secondCard){\r\n\r\n            if(this.checkMatch()){\r\n             this.clearCards();\r\n\r\n                if (this.checkGameOver()){\r\n                //GameOver\r\n                gameOverCallBack();\r\n                 };\r\n            }else{\r\n                setTimeout(() => {\r\n                    // No Match\r\n                this.unflipCards();\r\n                noMatchCallBack();\r\n                }, 1000);\r\n\r\n                 }\r\n            }\r\n         }\r\n\r\n\r\n},\r\n\r\n}\r\n\r\nexport default game;","import React from 'react';\r\nimport { Fragment } from 'react';\r\n\r\nfunction GameOver (props){\r\n\r\n\r\n    return(props.show?\r\n        <div id='gameOver'>\r\n    \r\n        <div>\r\n            Parabéns!!!<br/> Você completou o Jogo!\r\n        </div>\r\n        <button id='btn' onClick={props.handleRestart}>Jogue novamente</button>\r\n\r\n        </div>:<Fragment/>\r\n    )\r\n\r\n}\r\n\r\nexport default GameOver;","import React from 'react';\r\nimport { Fragment } from 'react/cjs/react.production.min';\r\n\r\nfunction GameHome (props){\r\n\r\n\r\n    return( props.show?\r\n        <div id='gameHome'>\r\n    \r\n        \r\n        <button id='start' onClick={props.handleStart}>START GAME</button>\r\n\r\n\r\n        </div>:<Fragment/>\r\n    )\r\n\r\n}\r\n\r\nexport default GameHome;","import React from 'react';\r\n\r\n\r\nfunction CardElement(props){\r\n\r\n    return(\r\n\r\n    <div onClick={()=>{props.handleFlip(props.card)}} id={props.card.id} className={`card ${props.card.flipped?'flip':''}`}>\r\n    \r\n    {/* Front */}\r\n    <div className='card_front'>\r\n        <img className='icon' src={`assets/${props.card.icon}.png`} alt={props.card.icon}/>\r\n    </div>\r\n\r\n    {/* Back */}\r\n    <div className='card_back'>\r\n    <img className='icon' src='assets/back.png' alt='Back Card'/>\r\n    </div>\r\n\r\n    </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default CardElement;","import React from 'react';\r\nimport { Fragment } from 'react/cjs/react.production.min';\r\nimport CardElement from './CardElement';\r\n\r\nfunction GameBoard(props){\r\n\r\n    return( props.show?\r\n    <div className='game' id='gameBoard'>\r\n\r\n        {props.cards.map((card,index)=>\r\n         <CardElement handleFlip={props.handleFlip} card={card} key={index}/>\r\n        )}\r\n    </div>:<Fragment/>)\r\n}\r\n\r\nexport default GameBoard;","import React, { useEffect, useState } from 'react';\r\nimport game from './game/game';\r\nimport GameOver from './components/GameOver';\r\nimport GameHome from  './components/GameHome';\r\nimport GameBoard from './components/GameBoard';\r\n\r\n\r\nfunction MemoryGame (){\r\n\r\n    //home\r\n    const [gameHome, setGameHome] = useState(true);\r\n\r\n    //gameboard\r\n    const[gameBoardOn, setGameBoardOn] = useState(false);\r\n\r\n    //cards\r\n    const [cards, setCards] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        setCards(game.createCards());\r\n    },[]);\r\n    \r\n    //gameOver\r\n    const [gameOver, setGameOver] = useState(false);\r\n\r\n    //Start\r\n    function start(){\r\n\r\n        setGameHome(false);\r\n        setGameBoardOn(true);\r\n\r\n    }\r\n\r\n    //Restart\r\n    function restart(){\r\n        game.clearCards();\r\n        setCards(game.createCards());\r\n        setGameOver(false);\r\n    }\r\n\r\n    //Flip cards\r\n    function handleFlip(card){\r\n\r\n    game.flipcard(card.id, ()=>{\r\n        //GameOverCallBack\r\n        setGameOver(true);\r\n    }, ()=>{\r\n        //noMatchCallBack\r\n        setCards([...game.cards]);\r\n    })\r\n\r\n    setCards([...game.cards]);\r\n        \r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <GameHome show={gameHome} handleStart={start}/>\r\n            <GameBoard handleFlip={handleFlip} show={gameBoardOn} cards={cards}/>\r\n            <GameOver show={gameOver} handleRestart={restart}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemoryGame;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MemoryGame from './MemoryGame';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MemoryGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}